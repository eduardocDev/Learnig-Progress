Module Details

This module teaches you how to build interactive web forms using PHP, As you will see, the
bigger pictures involves not just PHP, but also HTMO, CSS, and JavaScript. By the time you
are finished, you will understand:
	
	*How to create dynamic and interactive web forms
	*How PHP operates under the client/server model
	*Whats is meant by "request" and "Response"
	*How PHP and the web server interact
	*Basic concepts of PHP security and how to protect your websites against attack
	*How web form data is transmitted to and received by PHP

Client/server model

Client makes a request for a resource over a network protocol.
Server processes request , consulting whatever resources are needed,
and returns a response message.

The transport mechanism is usually, but not always, the Hypertext Transfer
Protocol(HTTP)

The Uniform resource Locator (URL)

The URL is an address of a web resource. THat resource is defined by either a domain name,
like mars-express.com, or an internet protocol (IP) address like 64.74.192.10.

The domain name is purchased by a domian registrar, and assgned to your web server's IP
address. When entering a URL into a browser (client) location bar, a request is transmitted
over protocol to the web server the domain name poits to:

like :: http//mars-express.com?id=10&mission=STS395

HTTP request

A request has a few important parts:

    * The wrapper or scheme: 'http://' 
    * The domain: 'mars-express.com'
    * The query string separator: '?'
    * The query string (name=value pairs): id=10&mission=STS395
    * The header: Metadata about the request itself, transmitted along with with the querystring part.

HTTP Response

A response has a couple of important parts:
    * The data format: Usually a body of HTML markup.
    * The header: Metadata about the response itself, transmitted along with the request body.
    * The status code: A 3-digit integer code that identifies response status.

HTTP Protocol

important  aspects:
    * A stateless protocol, meaning information is not maintained by either party in the communication between request/response cycles.
    * Developed in late 1990s.
    * Is a plain text protocol--no encyption take place.
    * Has a variant--HTTPS--that does encrypt data in transport.
    * Estabilishes a connection over Transmission Control Protocol (TCP)

The Web Server

By fat the most common use of PHP is as a web server extension, that means 
a Web Server is passing request and response data to and from a PHP process running
by a web server, The Web Server is responsible for intercepting request data and passing it along to the
PHP process, and then taking the PHP response and passing it back to the client.

HTML, CSS, JavaScript and PHP

HTML, CSS, and PHP work closely together, but are completaly independent. HTML is generated by
PHP and PHP can be embedded in HTML, but they are two completaly different things.

    *HTML: Hypertext Markup Languague. A tag-based markup Languaguedecribing how a page renders on a client.
    CSS: Cascading Style Sheets, A presentation configuration that defines positioning and appearence of HTML
    elements in order to define look and feel on a single HTML element, or a whole bunche of them.

    *JavaScript: JavaScript a deep and comprehensive scripting language that can do it all, but is primarily
    used to manipulate a web page on the front end. It's what makes web site presentations dynamic.

    *PHP: PHP HyperText Processor. A deep and comprehensive general purpose programming language used primarily for
    creating HTML content by a Server.

HTML, CSS, JavaScript and PHP

Learning all of these tools is important if you wanw to be a "full stack" developer. being a "full stack" developer
will alow you to code the complete Client/Server cycle, and is very desirable skill in the web development community.

This class will narrow the focus to working with HTML and PHP.

HTML generated by PHP

A PHP application generates HTML by adding HTML tags to string and returnning a response in the form of an echo of print
statement. Here's an exemple building a compound string containing an HTML table.

    function htmlTable(String $title = "Hours", array $worked) :string {
        $html = '<table><thead>';
        $html .= '<tr><th colspan=\"2\">$title</th></tr>";
        $html .= '</thead><tbody>';
        foreach($worked as $day => $hours){
            $html .= "<tr><th>$day</th>";
            $html .= "<td style=\"text-align:right;\">$hours</td>";
            $html .= '</tr>';
        }
        $html .= '</tbody></table>';
        return $html;
    }
    $worked = ['Monday' => 8, 'Tuesday' => 4, 'Wednesday' => 1, 'Thursday' => 6, 'Friday' => 9];
    echo htmlTable('Hours Worked', $worked);

PHP embedded in HTML

It is common to embed PHP code into HTML markup:

<?php $class="test"; $color = 'blue'; $id = 'item_test'; ?>
<?php $attribs = ['id'=> $id, 'class' => $class, 'name' => = "data[]"]; ?>
<ul style="list-style: none;">
    <!-- A dynamic list item; -->
        <li style="color: <?= $color ?>;padding 10px;">
        <!-- A dynamic form input tag: -->
        Dynamic: <input id="cb_<?= $id?>" class="<?= $class ?>" />
    </li>
    <li style="color: <?= $color ?>; padding: 10px;">
        <!-- A dynamic form input tag with all attributes defined: -->
        attributes from Array:
        <input <?php foreach ($attribs as $key => $value) echo "$key=\"$value\" "; ?>/>
        </li>
    </ul> 
